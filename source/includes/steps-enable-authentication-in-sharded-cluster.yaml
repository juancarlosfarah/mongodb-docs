stepnum: 1
title: Create a keyfile.
ref: generate-keyfile
level: 4
pre: |
   Create the :ref:`keyfile <internal-auth-keyfile>` your deployment will
   use to authenticate to members to each other. You can generate a
   keyfile using any method you choose. Ensure that the password stored
   in the keyfile is both long and contains a high amount of randomness.

   For example, the following operation uses ``openssl`` command to
   generate pseudo-random data to use for a keyfile:
action:
  language: sh
  code: |
    openssl rand -base64 741 > /srv/mongodb/mongodb-keyfile
    chmod 600 mongodb-keyfile
post: |

---
title: Enable authentication for each member of the sharded cluster or replica set. 
stepnum: 2
ref: enable-auth
level: 4
pre: |
  For *each* :program:`mongod` in the replica set or for *each*
  :program:`mongos` and :program:`mongod` in the sharded cluster,
  including all config servers and shards, specify the keyfile using 
  either a configuration file or a command line option.
action:
  - pre: |
      In a configuration file, set the :setting:`security.keyFile` option to the
      keyfile's path and then start the component, as in the following
      example:
    language: yaml
    code: |
      security:
        keyFile: /srv/mongodb/keyfile
    post: |
       Include any other settings as appropriate for your deployment.
  - pre: |
      Or, when starting the component, specify the ``--keyFile``
      option. For example, for a :program:`mongod`
    language: sh
    code: |
       mongod --keyFile /srv/mongodb/mongodb-keyfile --dbpath <path to data>
    post: |
       Include any other options as appropriate for your deployment.
post: |
  Enabling internal authentication enables :doc:`access control
  </core/authorization>`.
---
title: Connect to the MongoDB instance via the localhost exception.
stepnum: 3
level: 4
ref: connect-via-localhost
content: |
    To add the first user using :ref:`localhost-exception`:

    - For a replica set, connect a :program:`mongo` shell to the primary.
      Run the :program:`mongo` shell from the same host as the primary.

    - For a sharded cluster, connect a :program:`mongo` shell to the
      :program:`mongos`. Run the :program:`mongo` shell from same host as
      the :program:`mongos`.
---
title: Add  first user.
stepnum: 4
level: 4
ref: add-user
source:
  file: steps-create-admin-then-enable-authentication.yaml
  ref: create-user-admin
post: |
   After you create the user administrator, for a replica set, the
   :ref:`localhost exception <localhost-exception>` is no longer
   available.
   
   For sharded clusters, you must still prevent unauthorized access to
   the individual shards. Follow one of the following steps for each
   shard in your cluster:

   - Create an administrative user, or

   - Disable the :ref:`localhost-exception` at startup. To disable the
     localhost exception, set the :parameter:`enableLocalhostAuthBypass`
     to 0.
---
stepnum: 5
source:
  file: steps-create-admin-then-enable-authentication.yaml
  ref: auth-as-admin
level: 4
---
stepnum: 6
source:
  file: steps-create-admin-then-enable-authentication.yaml
  ref: create-additionalusers
level: 4
...
